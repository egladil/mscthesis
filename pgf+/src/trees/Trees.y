/* This Bison file was machine-generated by BNFC */
%{
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <iostream>
#include "Absyn.H"
typedef struct yy_buffer_state *YY_BUFFER_STATE;
int yyparse(void);
int yylex(void);
YY_BUFFER_STATE gfyy_scan_string(const char *str);
void gfyy_delete_buffer(YY_BUFFER_STATE buf);
int gfyy_mylinenumber;
int gfinitialize_lexer(FILE * inp);
int gfyywrap(void)
{
  return 1;
}
void gfyyerror(const char *str)
{
  std::cout << "line " << gfyy_mylinenumber << std::endl ;
  fprintf(stderr,"error: %s\n",str);
}


namespace gf
{
static Tree* YY_RESULT_Tree_ = 0;
Tree* pTree(FILE *inp)
{
  gfyy_mylinenumber = 1;
  gfinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Tree_;
  }
}
Tree* pTree(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  gfyy_mylinenumber = 1;
  gfinitialize_lexer(0);
  buf = gfyy_scan_string(str);
  result = yyparse();
  gfyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Tree_;
  }
}

static Lit* YY_RESULT_Lit_ = 0;
Lit* pLit(FILE *inp)
{
  gfyy_mylinenumber = 1;
  gfinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Lit_;
  }
}
Lit* pLit(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  gfyy_mylinenumber = 1;
  gfinitialize_lexer(0);
  buf = gfyy_scan_string(str);
  result = yyparse();
  gfyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Lit_;
  }
}


}
%}

%union
{
  int int_;
  char char_;
  double double_;
  char* string_;
  gf::Tree* tree_;
  gf::Lit* lit_;

}

%name-prefix="gfyy"
%token _ERROR_
%token GF__SYMB_0    //   \
%token GF__SYMB_1    //   ->
%token GF__SYMB_2    //   $
%token GF__SYMB_3    //   (
%token GF__SYMB_4    //   )
%token GF__SYMB_5    //   META_

%type <tree_> Tree
%type <lit_> Lit

%token<string_> _STRING_
%token<int_> _INTEGER_
%token<double_> _DOUBLE_
%token<string_> _IDENT_

%%
Tree : GF__SYMB_0 _IDENT_ GF__SYMB_1 Tree {  $$ = new gf::Lambda($2, $4); gf::YY_RESULT_Tree_= $$; } 
  | GF__SYMB_2 _INTEGER_ {  $$ = new gf::Variable($2); gf::YY_RESULT_Tree_= $$; }
  | GF__SYMB_3 Tree Tree GF__SYMB_4 {  $$ = new gf::Application($2, $3); gf::YY_RESULT_Tree_= $$; }
  | Lit {  $$ = new gf::Literal($1); gf::YY_RESULT_Tree_= $$; }
  | GF__SYMB_5 _INTEGER_ {  $$ = new gf::MetaVariable($2); gf::YY_RESULT_Tree_= $$; }
  | _IDENT_ {  $$ = new gf::Function($1); gf::YY_RESULT_Tree_= $$; }
;
Lit : _INTEGER_ {  $$ = new gf::IntLiteral($1); gf::YY_RESULT_Lit_= $$; } 
  | _DOUBLE_ {  $$ = new gf::FloatLiteral($1); gf::YY_RESULT_Lit_= $$; }
  | _STRING_ {  $$ = new gf::StringLiteral($1); gf::YY_RESULT_Lit_= $$; }
;

